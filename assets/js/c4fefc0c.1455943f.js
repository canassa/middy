"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[7812],{3784:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var r=t(5893),s=t(1151);const a={title:"Internal Context",sidebar_position:3},o=void 0,i={id:"best-practices/internal-context",title:"Internal Context",description:"Middy is built to be async even at it's core. Middlewares can set promises to internal.",source:"@site/docs/best-practices/03-internal-context.md",sourceDirName:"best-practices",slug:"/best-practices/internal-context",permalink:"/docs/best-practices/internal-context",draft:!1,unlisted:!1,editUrl:"https://github.com/middyjs/middy/tree/main/website/docs/best-practices/03-internal-context.md",tags:[],version:"current",lastUpdatedAt:1706708723,formattedLastUpdatedAt:"Jan 31, 2024",sidebarPosition:3,frontMatter:{title:"Internal Context",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Connection reuse",permalink:"/docs/best-practices/connection-reuse"},next:{title:"Bundling Lambda packages",permalink:"/docs/best-practices/bundling"}},c={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Middy is built to be async even at it's core. Middlewares can set promises to ",(0,r.jsx)(n.code,{children:"internal"}),".\nThis approach allows them to be resolved together just when you need them."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import middy from '@middy/core'\nimport {getInternal} from '@middy/util'\n\nconst lambdaHandler = async (event, context, { signal }) => {\n\n}\n\nconst config = {\n  internal: new Proxy({}, {\n    get: (target, prop, receiver) => {\n      // ...\n      return Reflect.get(...arguments)\n    },\n    set: (obj, prop, value) => {\n      // ... ie if `prop` changes, trigger something\n      obj[prop] = value\n      return true\n    }\n  })\n}\n\nexport const handler = middy(config)\n  // Incase you want to add values on to internal directly\n  .before((async (request) => {\n    request.internal = {\n      env: process.env.NODE_ENV\n    }\n  }))\n  .use(sts(...))\n  .use(ssm(...))\n  .use(rdsSigner(...))\n  .use(secretsManager(...))\n  .before(async (request) => {\n    // internal == { key: 'value' }\n\n    // Map with same name\n    Object.assign(request.context, await getInternal(['key'], request))\n    // -> context == { key: 'value'}\n\n    // Map to new name\n    Object.assign(request.context, await getInternal({'newKey':'key'}, request))\n    // -> context == { newKey: 'value'}\n\n    // get all the values, only if you really need to,\n    // but you should only request what you need for the handler\n    Object.assign(request.context, await getInternal(true, request))\n    // -> context == { key: 'value'}\n  })\n  .handler(lambdaHandler)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var r=t(7294);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);